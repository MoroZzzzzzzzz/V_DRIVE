import os
import asyncio
import logging
from datetime import datetime, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from motor.motor_asyncio import AsyncIOMotorClient
import uuid
from typing import Optional, Dict, Any

# Configure logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

class VelesDriveTelegramBot:
    """VELES DRIVE Telegram Bot Implementation"""
    
    def __init__(self):
        self.bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
        self.mongo_url = os.environ.get('MONGO_URL')
        self.backend_url = os.environ.get('REACT_APP_BACKEND_URL', 'http://localhost:8001')
        
        if not self.bot_token:
            logger.warning("TELEGRAM_BOT_TOKEN not found in environment variables")
            return
            
        # Initialize MongoDB connection
        self.client = AsyncIOMotorClient(self.mongo_url)
        self.db = self.client.veles_drive
        
        # Initialize bot application
        self.application = Application.builder().token(self.bot_token).build()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """Setup bot command and message handlers"""
        # Command handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("search", self.search_command))
        self.application.add_handler(CommandHandler("favorites", self.favorites_command))
        self.application.add_handler(CommandHandler("profile", self.profile_command))
        self.application.add_handler(CommandHandler("notifications", self.notifications_command))
        self.application.add_handler(CommandHandler("connect", self.connect_command))
        self.application.add_handler(CommandHandler("disconnect", self.disconnect_command))
        
        # Callback query handler for inline keyboards
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # Message handler for text messages
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        try:
            chat_id = update.effective_chat.id
            user_data = update.effective_user
            
            # Check if user provided connection code
            if context.args:
                connection_code = context.args[0]
                await self.handle_account_connection(update, connection_code)
                return
            
            # Welcome message
            welcome_text = (
                "üöó *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VELES DRIVE!*\n\n"
                "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤, –ª–æ–¥–æ–∫ –∏ —Å–∞–º–æ–ª–µ—Ç–æ–≤.\n\n"
                "*–ß—Ç–æ —è —É–º–µ—é:*\n"
                "üîç –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
                "‚ù§Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏\n"
                "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö\n"
                "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ\n"
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n\n"
                "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
                "/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
                "/search - –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞\n"
                "/favorites - –≤–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ\n"
                "/profile - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ\n"
                "/notifications - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
                "/connect - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç VELES DRIVE\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /connect"
            )
            
            keyboard = [
                [InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="connect_account")],
                [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", callback_data="search_vehicles")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in start_command: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = (
            "üÜò *VELES DRIVE - –ü–æ–º–æ—â—å*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/search [—Ç–∏–ø] [–º–∞—Ä–∫–∞] - –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞\n"
            "/favorites - –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
            "/profile - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ\n"
            "/notifications - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "/connect - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç VELES DRIVE\n"
            "/disconnect - –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n\n"
            "*–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:*\n"
            "`/search BMW` - –ø–æ–∏—Å–∫ BMW\n"
            "`/search motorcycle Harley` - –ø–æ–∏—Å–∫ –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤ Harley\n"
            "`/search boat Azimut` - –ø–æ–∏—Å–∫ –ª–æ–¥–æ–∫ Azimut\n"
            "`/search plane Cessna` - –ø–æ–∏—Å–∫ —Å–∞–º–æ–ª–µ—Ç–æ–≤ Cessna\n\n"
            "*–¢–∏–ø—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:*\n"
            "üöó car (–∞–≤—Ç–æ–º–æ–±–∏–ª–∏)\n"
            "üèçÔ∏è motorcycle (–º–æ—Ç–æ—Ü–∏–∫–ª—ã)\n"
            "üõ•Ô∏è boat (–ª–æ–¥–∫–∏)\n"
            "‚úàÔ∏è plane (—Å–∞–º–æ–ª–µ—Ç—ã)\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç VELES DRIVE."
        )
        
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_vehicles")],
            [InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="connect_account")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /search command"""
        try:
            chat_id = update.effective_chat.id
            
            # Parse search arguments
            search_args = context.args
            vehicle_type = "car"  # default
            brand = ""
            
            if search_args:
                # Check if first arg is vehicle type
                if search_args[0].lower() in ['car', 'motorcycle', 'boat', 'plane']:
                    vehicle_type = search_args[0].lower()
                    if len(search_args) > 1:
                        brand = search_args[1]
                else:
                    brand = search_args[0]
            
            # Search in database
            search_results = await self.search_vehicles(vehicle_type, brand)
            
            if not search_results:
                type_emoji = {
                    'car': 'üöó',
                    'motorcycle': 'üèçÔ∏è', 
                    'boat': 'üõ•Ô∏è',
                    'plane': '‚úàÔ∏è'
                }
                
                await update.message.reply_text(
                    f"{type_emoji.get(vehicle_type, 'üöó')} –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤."
                )
                return
            
            # Format and send results
            await self.send_search_results(update, search_results, vehicle_type, brand)
            
        except Exception as e:
            logger.error(f"Error in search_command: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def favorites_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /favorites command"""
        try:
            chat_id = update.effective_chat.id
            
            # Get user from Telegram chat_id
            user = await self.get_user_by_telegram_id(chat_id)
            
            if not user:
                await update.message.reply_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ VELES DRIVE."
                )
                return
            
            # Get user's favorites
            favorites = await self.get_user_favorites(user['id'])
            
            if not favorites:
                await update.message.reply_text(
                    "üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n"
                    "–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ –±–æ—Ç–µ."
                )
                return
            
            # Send favorites list
            await self.send_favorites_list(update, favorites)
            
        except Exception as e:
            logger.error(f"Error in favorites_command: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /profile command"""
        try:
            chat_id = update.effective_chat.id
            
            # Get user from Telegram chat_id
            user = await self.get_user_by_telegram_id(chat_id)
            
            if not user:
                await update.message.reply_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ VELES DRIVE."
                )
                return
            
            # Format profile info
            role_names = {
                'buyer': 'üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å',
                'dealer': 'üè™ –î–∏–ª–µ—Ä', 
                'admin': 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
            }
            
            profile_text = (
                f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å VELES DRIVE*\n\n"
                f"*–ò–º—è:* {user.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"*Email:* {user.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"*–†–æ–ª—å:* {role_names.get(user.get('role'), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"*–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {self.format_date(user.get('created_at'))}\n"
                f"*2FA:* {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if user.get('two_fa_enabled') else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n\n"
            )
            
            # Add role-specific info
            if user.get('role') == 'dealer':
                # Get dealer stats
                dealer_stats = await self.get_dealer_stats(user['id'])
                profile_text += (
                    f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–ª–µ—Ä–∞:*\n"
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {dealer_stats.get('active_cars', 0)}\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {dealer_stats.get('total_sales', 0)}\n"
                    f"‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {dealer_stats.get('rating', 0):.1f}/5.0\n\n"
                )
            
            elif user.get('role') == 'buyer':
                # Get buyer stats
                buyer_stats = await self.get_buyer_stats(user['id'])
                profile_text += (
                    f"üìä *–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
                    f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {buyer_stats.get('total_views', 0)}\n"
                    f"‚Ä¢ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {buyer_stats.get('favorites_count', 0)}\n"
                    f"‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–π: {buyer_stats.get('comparisons_count', 0)}\n\n"
                )
            
            keyboard = [
                [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=f"{self.backend_url.replace(':8001', ':3000')}")],
                [InlineKeyboardButton("‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="show_favorites")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(profile_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in profile_command: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def notifications_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /notifications command"""
        try:
            chat_id = update.effective_chat.id
            
            user = await self.get_user_by_telegram_id(chat_id)
            if not user:
                await update.message.reply_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ VELES DRIVE."
                )
                return
            
            # Get current notification settings
            notifications_enabled = user.get('telegram_notifications_enabled', True)
            
            text = (
                f"üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
                f"*–°—Ç–∞—Ç—É—Å:* {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if notifications_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n"
                f"*–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n"
                f"‚Ä¢ –ù–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
                f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º\n"
                f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤\n"
                f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥–∏–ª–µ—Ä–æ–≤\n"
                f"‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."
            )
            
            keyboard = [
                [InlineKeyboardButton(
                    "üîï –û—Ç–∫–ª—é—á–∏—Ç—å" if notifications_enabled else "üîî –í–∫–ª—é—á–∏—Ç—å", 
                    callback_data=f"toggle_notifications_{user['id']}"
                )],
                [InlineKeyboardButton("‚öôÔ∏è –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", url=f"{self.backend_url.replace(':8001', ':3000')}/profile")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in notifications_command: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def connect_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /connect command"""
        try:
            chat_id = update.effective_chat.id
            
            # Check if already connected
            existing_user = await self.get_user_by_telegram_id(chat_id)
            if existing_user:
                await update.message.reply_text(
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n"
                    f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {existing_user.get('full_name')}\n"
                    f"*Email:* {existing_user.get('email')}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /disconnect –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞."
                )
                return
            
            # Generate connection code
            connection_code = str(uuid.uuid4())[:8].upper()
            
            # Store connection request
            await self.db.telegram_connections.insert_one({
                "connection_code": connection_code,
                "telegram_chat_id": chat_id,
                "telegram_user": {
                    "id": update.effective_user.id,
                    "username": update.effective_user.username,
                    "first_name": update.effective_user.first_name,
                    "last_name": update.effective_user.last_name
                },
                "created_at": datetime.now(timezone.utc).isoformat(),
                "expires_at": datetime.now(timezone.utc).isoformat(),
                "status": "pending"
            })
            
            connect_text = (
                f"üîó *–ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ VELES DRIVE*\n\n"
                f"*–ö–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:* `{connection_code}`\n\n"
                f"*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n"
                f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç VELES DRIVE\n"
                f"2. –í–æ–π–¥–∏—Ç–µ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç\n"
                f"3. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
                f"4. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª 'Telegram'\n"
                f"5. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: `{connection_code}`\n"
                f"6. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–≤—è–∑–∞—Ç—å'\n\n"
                f"‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.\n\n"
                f"–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ –±–æ—Ç."
            )
            
            keyboard = [
                [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å VELES DRIVE", url=f"{self.backend_url.replace(':8001', ':3000')}/profile")],
                [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∫–æ–¥", callback_data="generate_new_code")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(connect_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in connect_command: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞ –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def disconnect_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /disconnect command"""
        try:
            chat_id = update.effective_chat.id
            
            user = await self.get_user_by_telegram_id(chat_id)
            if not user:
                await update.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.")
                return
            
            # Remove telegram connection
            await self.db.users.update_one(
                {"id": user['id']},
                {"$unset": {"telegram_chat_id": "", "telegram_user": ""}}
            )
            
            await update.message.reply_text(
                "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω!\n\n"
                "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram.\n"
                "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect"
            )
            
        except Exception as e:
            logger.error(f"Error in disconnect_command: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline keyboard button clicks"""
        try:
            query = update.callback_query
            await query.answer()
            
            data = query.data
            
            if data == "connect_account":
                await self.connect_command(update, context)
            elif data == "search_vehicles":
                await self.search_command(update, context)
            elif data == "show_help":
                await self.help_command(update, context)
            elif data == "show_favorites":
                await self.favorites_command(update, context)
            elif data.startswith("toggle_notifications_"):
                user_id = data.split("_")[-1]
                await self.toggle_notifications(query, user_id)
            elif data == "generate_new_code":
                await self.connect_command(update, context)
            
        except Exception as e:
            logger.error(f"Error in button_callback: {e}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages"""
        try:
            text = update.message.text.lower()
            
            # Simple keyword responses
            if any(word in text for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '—Å—Ç–∞—Ä—Ç']):
                await self.start_command(update, context)
            elif any(word in text for word in ['–ø–æ–º–æ—â—å', 'help', '–∫–æ–º–∞–Ω–¥—ã']):
                await self.help_command(update, context)
            elif any(word in text for word in ['–ø–æ–∏—Å–∫', '–Ω–∞–π—Ç–∏', 'search']):
                await self.search_command(update, context)
            elif any(word in text for word in ['–∏–∑–±—Ä–∞–Ω–Ω–æ–µ', 'favorites', 'favorite']):
                await self.favorites_command(update, context)
            elif any(word in text for word in ['–ø—Ä–æ—Ñ–∏–ª—å', 'profile', '–∞–∫–∫–∞—É–Ω—Ç']):
                await self.profile_command(update, context)
            else:
                # Default response with suggestions
                await update.message.reply_text(
                    "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ /search [–º–∞—Ä–∫–∞] - –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞\n"
                    "‚Ä¢ /favorites - –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
                    "‚Ä¢ /profile - –ø—Ä–æ—Ñ–∏–ª—å"
                )
                
        except Exception as e:
            logger.error(f"Error in handle_message: {e}")
    
    # Helper methods
    async def search_vehicles(self, vehicle_type: str, brand: str = "") -> list:
        """Search vehicles in database"""
        try:
            query = {"vehicle_type": vehicle_type}
            if brand:
                query["brand"] = {"$regex": brand, "$options": "i"}
            
            # Limit to 10 results
            vehicles = await self.db.cars.find(query).limit(10).to_list(length=None)
            return vehicles
            
        except Exception as e:
            logger.error(f"Error searching vehicles: {e}")
            return []
    
    async def get_user_by_telegram_id(self, telegram_chat_id: int):
        """Get user by Telegram chat ID"""
        try:
            user = await self.db.users.find_one({"telegram_chat_id": telegram_chat_id})
            return user
        except Exception as e:
            logger.error(f"Error getting user by telegram ID: {e}")
            return None
    
    async def get_user_favorites(self, user_id: str) -> list:
        """Get user's favorite vehicles"""
        try:
            favorites = await self.db.favorites.find({"user_id": user_id}).to_list(length=None)
            
            # Get vehicle details for each favorite
            favorite_vehicles = []
            for fav in favorites:
                vehicle = await self.db.cars.find_one({"id": fav["car_id"]})
                if vehicle:
                    favorite_vehicles.append(vehicle)
            
            return favorite_vehicles
            
        except Exception as e:
            logger.error(f"Error getting user favorites: {e}")
            return []
    
    async def get_dealer_stats(self, user_id: str) -> dict:
        """Get dealer statistics"""
        try:
            active_cars = await self.db.cars.count_documents({"dealer_id": user_id, "status": "active"})
            
            # Mock stats for now
            return {
                "active_cars": active_cars,
                "total_sales": 0,
                "rating": 4.5
            }
        except Exception as e:
            logger.error(f"Error getting dealer stats: {e}")
            return {}
    
    async def get_buyer_stats(self, user_id: str) -> dict:
        """Get buyer statistics"""
        try:
            favorites_count = await self.db.favorites.count_documents({"user_id": user_id})
            views_count = await self.db.car_views.count_documents({"user_id": user_id})
            
            return {
                "total_views": views_count,
                "favorites_count": favorites_count,
                "comparisons_count": 0  # Mock for now
            }
        except Exception as e:
            logger.error(f"Error getting buyer stats: {e}")
            return {}
    
    async def send_search_results(self, update: Update, results: list, vehicle_type: str, brand: str):
        """Send formatted search results"""
        try:
            type_emoji = {
                'car': 'üöó',
                'motorcycle': 'üèçÔ∏è', 
                'boat': 'üõ•Ô∏è',
                'plane': '‚úàÔ∏è'
            }
            
            header = f"{type_emoji.get(vehicle_type, 'üöó')} *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n"
            if brand:
                header += f"*–ú–∞—Ä–∫–∞:* {brand.title()}\n"
            header += f"*–ù–∞–π–¥–µ–Ω–æ:* {len(results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
            
            await update.message.reply_text(header, parse_mode='Markdown')
            
            for vehicle in results[:5]:  # Show max 5 results
                await self.send_vehicle_card(update, vehicle)
                
        except Exception as e:
            logger.error(f"Error sending search results: {e}")
    
    async def send_vehicle_card(self, update: Update, vehicle: dict):
        """Send formatted vehicle card"""
        try:
            type_emoji = {
                'car': 'üöó',
                'motorcycle': 'üèçÔ∏è', 
                'boat': 'üõ•Ô∏è',
                'plane': '‚úàÔ∏è'
            }
            
            emoji = type_emoji.get(vehicle.get('vehicle_type', 'car'), 'üöó')
            
            card_text = (
                f"{emoji} *{vehicle.get('brand', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {vehicle.get('model', '')}*\n"
                f"üí∞ *{vehicle.get('price', 0):,} ‚ÇΩ*\n"
                f"üìÖ –ì–æ–¥: {vehicle.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üé® –¶–≤–µ—Ç: {vehicle.get('color', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üìç {vehicle.get('location', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            )
            
            # Add type-specific info
            if vehicle.get('vehicle_type') in ['car', 'motorcycle'] and vehicle.get('mileage'):
                card_text += f"üõ£ –ü—Ä–æ–±–µ–≥: {vehicle['mileage']:,} –∫–º\n"
            elif vehicle.get('vehicle_type') in ['boat', 'plane'] and vehicle.get('hours_operated'):
                card_text += f"‚è± –ú–æ—Ç–æ—á–∞—Å—ã: {vehicle['hours_operated']:,}\n"
            
            if vehicle.get('engine_power'):
                card_text += f"‚ö° –ú–æ—â–Ω–æ—Å—Ç—å: {vehicle['engine_power']} –ª.—Å.\n"
            
            keyboard = [
                [InlineKeyboardButton("üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=f"{self.backend_url.replace(':8001', ':3000')}/car/{vehicle.get('id')}")],
                [InlineKeyboardButton("‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_favorite_{vehicle.get('id')}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(card_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error sending vehicle card: {e}")
    
    async def send_favorites_list(self, update: Update, favorites: list):
        """Send user's favorites list"""
        try:
            header = f"‚ù§Ô∏è *–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è*\n*–í—Å–µ–≥–æ:* {len(favorites)}\n\n"
            await update.message.reply_text(header, parse_mode='Markdown')
            
            for vehicle in favorites[:10]:  # Show max 10 favorites
                await self.send_vehicle_card(update, vehicle)
                
        except Exception as e:
            logger.error(f"Error sending favorites list: {e}")
    
    async def toggle_notifications(self, query, user_id: str):
        """Toggle user notifications"""
        try:
            user = await self.db.users.find_one({"id": user_id})
            if not user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            current_state = user.get('telegram_notifications_enabled', True)
            new_state = not current_state
            
            await self.db.users.update_one(
                {"id": user_id},
                {"$set": {"telegram_notifications_enabled": new_state}}
            )
            
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            await query.edit_message_text(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}!")
            
        except Exception as e:
            logger.error(f"Error toggling notifications: {e}")
    
    async def handle_account_connection(self, update: Update, connection_code: str):
        """Handle account connection with code"""
        try:
            chat_id = update.effective_chat.id
            
            # Find connection request
            connection = await self.db.telegram_connections.find_one({
                "connection_code": connection_code,
                "status": "pending"
            })
            
            if not connection:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n"
                    "–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ VELES DRIVE –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect"
                )
                return
            
            # Update connection status
            await self.db.telegram_connections.update_one(
                {"connection_code": connection_code},
                {"$set": {"status": "completed", "telegram_chat_id": chat_id}}
            )
            
            await update.message.reply_text(
                "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ –±–æ—Ç\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            )
            
        except Exception as e:
            logger.error(f"Error handling account connection: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def format_date(self, date_str: str) -> str:
        """Format date string for display"""
        try:
            if not date_str:
                return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            date_obj = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
            return date_obj.strftime("%d.%m.%Y")
        except:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    async def start_bot(self):
        """Start the Telegram bot"""
        if not self.bot_token:
            logger.error("Cannot start bot: No TELEGRAM_BOT_TOKEN provided")
            return
        
        logger.info("Starting VELES DRIVE Telegram Bot...")
        await self.application.run_polling()
    
    async def stop_bot(self):
        """Stop the Telegram bot"""
        if self.application:
            await self.application.stop()
        if self.client:
            self.client.close()

# Main execution
if __name__ == "__main__":
    bot = VelesDriveTelegramBot()
    asyncio.run(bot.start_bot())