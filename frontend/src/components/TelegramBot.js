import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { useAuth } from '../contexts/AuthContext';
import { toast } from 'sonner';
import axios from 'axios';

const TelegramBot = () => {
  const { user, isAuthenticated } = useAuth();
  const [telegramStatus, setTelegramStatus] = useState({
    connected: false,
    username: null,
    connected_at: null,
    notifications_enabled: true
  });
  const [connectionCode, setConnectionCode] = useState('');
  const [loading, setLoading] = useState(false);
  const [showConnectionDialog, setShowConnectionDialog] = useState(false);
  
  const backendUrl = process.env.REACT_APP_BACKEND_URL;

  useEffect(() => {
    if (isAuthenticated) {
      loadTelegramStatus();
    }
  }, [isAuthenticated]);

  const loadTelegramStatus = async () => {
    try {
      const response = await axios.get(`${backendUrl}/api/telegram/status`, {
        headers: { Authorization: `Bearer ${user?.token}` }
      });
      setTelegramStatus(response.data);
    } catch (error) {
      console.error('Error loading Telegram status:', error);
    }
  };

  const generateConnectionCode = async () => {
    try {
      setLoading(true);
      const response = await axios.post(`${backendUrl}/api/telegram/generate-code`, {}, {
        headers: { Authorization: `Bearer ${user?.token}` }
      });
      
      const { connection_code, bot_username } = response.data;
      setConnectionCode(connection_code);
      
      // Open Telegram bot
      const telegramUrl = `https://t.me/${bot_username}?start=${connection_code}`;
      window.open(telegramUrl, '_blank');
      
      toast.success('–ö–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      setShowConnectionDialog(true);
      
    } catch (error) {
      console.error('Error generating connection code:', error);
      toast.error(error.response?.data?.detail || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  const connectTelegramWithCode = async () => {
    try {
      setLoading(true);
      await axios.post(`${backendUrl}/api/telegram/connect`, {
        connection_code: connectionCode
      }, {
        headers: { Authorization: `Bearer ${user?.token}` }
      });
      
      setTelegramStatus(prev => ({ ...prev, connected: true }));
      setShowConnectionDialog(false);
      toast.success('Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
      await loadTelegramStatus(); // Refresh status
      
    } catch (error) {
      console.error('Error connecting Telegram:', error);
      toast.error(error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram');
    } finally {
      setLoading(false);
    }
  };

  const disconnectTelegram = async () => {
    try {
      setLoading(true);
      await axios.post(`${backendUrl}/api/telegram/disconnect`, {}, {
        headers: { Authorization: `Bearer ${user?.token}` }
      });
      
      setTelegramStatus({
        connected: false,
        username: null,
        connected_at: null,
        notifications_enabled: true
      });
      toast.success('Telegram –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
      
    } catch (error) {
      console.error('Error disconnecting Telegram:', error);
      toast.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Telegram');
    } finally {
      setLoading(false);
    }
  };

  // sendTestNotification function removed - not needed in new version

  if (!isAuthenticated) {
    return null;
  }

  return (
    <div className="space-y-6">
      <Card className="bg-gray-900 border-gray-700">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center">
                <i className="fab fa-telegram text-white text-xl"></i>
              </div>
              <div>
                <CardTitle className="text-white">Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</CardTitle>
                <p className="text-gray-400 text-sm">
                  –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ Telegram
                </p>
              </div>
            </div>
            
            <Badge className={telegramStatus.connected ? 'bg-green-600 text-white' : 'bg-gray-600 text-white'}>
              {telegramStatus.connected ? (
                <>
                  <i className="fas fa-check-circle mr-1"></i>
                  –ü–æ–¥–∫–ª—é—á–µ–Ω
                </>
              ) : (
                <>
                  <i className="fas fa-times-circle mr-1"></i>
                  –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
                </>
              )}
            </Badge>
          </div>
        </CardHeader>
        
        <CardContent>
          {!telegramStatus.connected ? (
            <div className="space-y-4">
              <div className="bg-gray-800/50 p-4 rounded-lg border border-gray-700">
                <h4 className="text-white font-medium mb-3">ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Telegram –±–æ—Ç–∞:</h4>
                <ul className="text-gray-300 text-sm space-y-2">
                  <li className="flex items-center">
                    <i className="fas fa-search text-blue-400 w-4 mr-2"></i>
                    –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤, –ª–æ–¥–æ–∫ –∏ —Å–∞–º–æ–ª–µ—Ç–æ–≤
                  </li>
                  <li className="flex items-center">
                    <i className="fas fa-heart text-red-400 w-4 mr-2"></i>
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
                  </li>
                  <li className="flex items-center">
                    <i className="fas fa-bell text-yellow-400 w-4 mr-2"></i>
                    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö
                  </li>
                  <li className="flex items-center">
                    <i className="fas fa-user text-green-400 w-4 mr-2"></i>
                    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                  </li>
                </ul>
              </div>

              <div className="bg-blue-900/20 p-4 rounded-lg border border-blue-700">
                <h4 className="text-blue-400 font-medium mb-2">üìã –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å:</h4>
                <ol className="text-gray-300 text-sm space-y-1">
                  <li>1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram"</li>
                  <li>2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è Telegram –±–æ—Ç</li>
                  <li>3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ –±–æ—Ç–µ</li>
                  <li>4. –ê–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω</li>
                </ol>
              </div>

              <Button 
                onClick={generateConnectionCode}
                disabled={loading}
                className="w-full bg-blue-600 text-white hover:bg-blue-700"
              >
                <i className="fab fa-telegram mr-2"></i>
                {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram'}
              </Button>
            </div>
          ) : (
            <div className="space-y-4">
              <div className="bg-green-900/20 p-4 rounded-lg border border-green-700">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="text-green-400 font-medium">‚úÖ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω!</h4>
                    <div className="text-gray-300 text-sm space-y-1 mt-2">
                      {telegramStatus.username && (
                        <p>üë§ Username: @{telegramStatus.username}</p>
                      )}
                      {telegramStatus.connected_at && (
                        <p>üìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: {new Date(telegramStatus.connected_at).toLocaleDateString('ru-RU')}</p>
                      )}
                      <p>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {telegramStatus.notifications_enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}</p>
                    </div>
                  </div>
                  <i className="fab fa-telegram text-green-400 text-3xl"></i>
                </div>
              </div>

              <div className="bg-gray-800/50 p-4 rounded-lg border border-gray-700">
                <h4 className="text-white font-medium mb-2">üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</h4>
                <div className="grid grid-cols-2 gap-2 text-sm text-gray-300">
                  <div>‚Ä¢ /help - –ø–æ–º–æ—â—å</div>
                  <div>‚Ä¢ /search - –ø–æ–∏—Å–∫</div>
                  <div>‚Ä¢ /favorites - –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</div>
                  <div>‚Ä¢ /profile - –ø—Ä–æ—Ñ–∏–ª—å</div>
                  <div>‚Ä¢ /notifications - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</div>
                  <div>‚Ä¢ /disconnect - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ</div>
                </div>
              </div>

              <div className="flex gap-3">
                <Button 
                  onClick={() => window.open('https://t.me/VelesDriveBot', '_blank')}
                  className="flex-1 bg-blue-600 text-white hover:bg-blue-700"
                >
                  <i className="fab fa-telegram mr-2"></i>
                  –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞
                </Button>
                <Button 
                  onClick={disconnectTelegram}
                  disabled={loading}
                  variant="outline"
                  className="border-red-600 text-red-400 hover:bg-red-600 hover:text-white"
                >
                  <i className="fas fa-unlink mr-2"></i>
                  {loading ? '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...' : '–û—Ç–∫–ª—é—á–∏—Ç—å'}
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Connection Dialog */}
      <Dialog open={showConnectionDialog} onOpenChange={setShowConnectionDialog}>
        <DialogContent className="bg-gray-900 border-gray-700">
          <DialogHeader>
            <DialogTitle className="text-white">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="text-center">
              <div className="text-2xl font-mono text-yellow-400 bg-gray-800 p-3 rounded-lg">
                {connectionCode}
              </div>
              <p className="text-gray-400 text-sm mt-2">
                –ö–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
              </p>
            </div>
            
            <div className="bg-blue-900/20 p-4 rounded-lg border border-blue-700">
              <p className="text-blue-400 text-sm">
                <i className="fas fa-info-circle mr-2"></i>
                –ï—Å–ª–∏ Telegram –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É @VelesDriveBot 
                –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/start {connectionCode}</code>
              </p>
            </div>

            <div className="flex gap-3">
              <Button 
                onClick={() => window.open('https://t.me/VelesDriveBot', '_blank')}
                className="flex-1 bg-blue-600 text-white hover:bg-blue-700"
              >
                –û—Ç–∫—Ä—ã—Ç—å Telegram
              </Button>
              <Button 
                onClick={() => setShowConnectionDialog(false)}
                variant="outline"
                className="border-gray-600 text-gray-300"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default TelegramBot;