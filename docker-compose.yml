version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: veles_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-veles2024!}
      MONGO_INITDB_DATABASE: ${DB_NAME:-veles_drive}
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - veles_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: veles_backend
    restart: unless-stopped
    environment:
      - MONGO_URL=mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-veles2024!}@mongodb:27017/${DB_NAME:-veles_drive}?authSource=admin
      - DB_NAME=${DB_NAME:-veles_drive}
      - SECRET_KEY=${SECRET_KEY:-veles-drive-secret-key-production-2024}
      - JWT_SECRET=${JWT_SECRET:-veles-drive-jwt-secret-production-2024}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://yourdomain.com}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - EMERGENT_LLM_KEY=${EMERGENT_LLM_KEY:-}
    ports:
      - "8001:8001"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - veles_network
    volumes:
      - backend_uploads:/app/uploads

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL:-http://localhost:8001}
    container_name: veles_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - veles_network

  # Nginx Reverse Proxy (опционально для production)
  nginx:
    image: nginx:alpine
    container_name: veles_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx-proxy.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl:ro  # Папка для SSL сертификатов
    depends_on:
      - frontend
      - backend
    networks:
      - veles_network
    profiles:
      - production  # Запуск только в production режиме

volumes:
  mongodb_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  veles_network:
    driver: bridge